{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dfea4b0c",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-03T17:20:44.684273Z",
     "iopub.status.busy": "2025-07-03T17:20:44.683849Z",
     "iopub.status.idle": "2025-07-03T17:20:46.596076Z",
     "shell.execute_reply": "2025-07-03T17:20:46.595273Z"
    },
    "papermill": {
     "duration": 1.918024,
     "end_time": "2025-07-03T17:20:46.597840",
     "exception": false,
     "start_time": "2025-07-03T17:20:44.679816",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cb6b7b54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-03T17:20:46.603791Z",
     "iopub.status.busy": "2025-07-03T17:20:46.603398Z",
     "iopub.status.idle": "2025-07-03T17:20:48.257298Z",
     "shell.execute_reply": "2025-07-03T17:20:48.256251Z"
    },
    "papermill": {
     "duration": 1.659231,
     "end_time": "2025-07-03T17:20:48.259686",
     "exception": false,
     "start_time": "2025-07-03T17:20:46.600455",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ðŸ“˜ Linear Regression on Healthcare Data: Predicting Weight\n",
    "\n",
    "# Step 1: Import libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cec8a539",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-03T17:20:48.267896Z",
     "iopub.status.busy": "2025-07-03T17:20:48.266433Z",
     "iopub.status.idle": "2025-07-03T17:20:48.279079Z",
     "shell.execute_reply": "2025-07-03T17:20:48.277687Z"
    },
    "papermill": {
     "duration": 0.018608,
     "end_time": "2025-07-03T17:20:48.281168",
     "exception": false,
     "start_time": "2025-07-03T17:20:48.262560",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Step 2: Create a synthetic dataset (or load from file)\n",
    "data = {\n",
    "    'Height_cm': np.random.normal(170, 10, 100),\n",
    "    'Age': np.random.randint(18, 65, 100),\n",
    "    'Exercise_Level': np.random.choice([1, 2, 3], 100),  # 1=Low, 2=Moderate, 3=High\n",
    "}\n",
    "\n",
    "# True weights with a simple relationship\n",
    "data['Weight_kg'] = (0.45 * data['Height_cm']) + (0.2 * data['Age']) - (3 * data['Exercise_Level']) + np.random.normal(0, 4, 100)\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a2f6682f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-03T17:20:48.288035Z",
     "iopub.status.busy": "2025-07-03T17:20:48.287081Z",
     "iopub.status.idle": "2025-07-03T17:20:48.305238Z",
     "shell.execute_reply": "2025-07-03T17:20:48.304080Z"
    },
    "papermill": {
     "duration": 0.023298,
     "end_time": "2025-07-03T17:20:48.306760",
     "exception": false,
     "start_time": "2025-07-03T17:20:48.283462",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Step 3: Preprocess data\n",
    "X = df[['Height_cm', 'Age', 'Exercise_Level']]\n",
    "y = df['Weight_kg']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "77c1cad8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-03T17:20:48.312750Z",
     "iopub.status.busy": "2025-07-03T17:20:48.311947Z",
     "iopub.status.idle": "2025-07-03T17:20:48.319528Z",
     "shell.execute_reply": "2025-07-03T17:20:48.318692Z"
    },
    "papermill": {
     "duration": 0.012042,
     "end_time": "2025-07-03T17:20:48.321128",
     "exception": false,
     "start_time": "2025-07-03T17:20:48.309086",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Step 4: Train-test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4deb9304",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-03T17:20:48.326643Z",
     "iopub.status.busy": "2025-07-03T17:20:48.326318Z",
     "iopub.status.idle": "2025-07-03T17:20:48.361517Z",
     "shell.execute_reply": "2025-07-03T17:20:48.360648Z"
    },
    "papermill": {
     "duration": 0.039564,
     "end_time": "2025-07-03T17:20:48.362995",
     "exception": false,
     "start_time": "2025-07-03T17:20:48.323431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Step 5: Train Linear Regression model\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8999559d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-03T17:20:48.369358Z",
     "iopub.status.busy": "2025-07-03T17:20:48.368566Z",
     "iopub.status.idle": "2025-07-03T17:20:48.659324Z",
     "shell.execute_reply": "2025-07-03T17:20:48.658431Z"
    },
    "papermill": {
     "duration": 0.295458,
     "end_time": "2025-07-03T17:20:48.660904",
     "exception": false,
     "start_time": "2025-07-03T17:20:48.365446",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error (MSE): 20.22\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Step 6: Evaluate\n",
    "y_pred = model.predict(X_test)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "\n",
    "print(\"Mean Squared Error (MSE):\", round(mse, 2))\n",
    "\n",
    "# Optional: Plot actual vs predicted\n",
    "plt.scatter(y_test, y_pred)\n",
    "plt.xlabel(\"Actual Weight\")\n",
    "plt.ylabel(\"Predicted Weight\")\n",
    "plt.title(\"Actual vs Predicted Weight\")\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.365489,
   "end_time": "2025-07-03T17:20:49.284497",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-03T17:20:39.919008",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
